@page "/eventvenue/edit"
@page "/eventvenue/edit/{ContentTagId}"

@attribute [Authorize]

@inject IMediator mediator
@inject IMapper mapper
@inject ISnackbar snackbar
@inject NavigationManager navManager

<h3>Edit Event Venue</h3>

<div style="max-width: 1000px;">
    @if (model == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-auto">Save</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Disabled="DeleteDisabled" Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeleteClick" Class="mr-auto">Delete</MudButton>
                    <MudButton Href="eventvenues" Variant="Variant.Outlined" Color="Color.Secondary" Class="mr-auto">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Venue Name" HelperText="Venue Name"
                                  @bind-Value="model.VenueName" For="@(() => model.VenueName)" />

                    <MudTextField Label="Address" HelperText="Venue Street Address" Class="mt-3"
                                  @bind-Value="model.Address" For="@(() => model.Address)" />

                    <MudTextField Label="City" Class="mt-3" HelperText="Venue City"
                                  @bind-Value="model.City" For="@(() => model.City)" />
                   

                    <MudTextField Label="State" HelperText="Venue State" Class="mt-3"
                                  @bind-Value="model.State" For="@(() => model.State)" />

                    <MudTextField Label="Latitude" HelperText="Venue Latitude for map" Class="mt-3"
                                  @bind-Value="model.Latitude" For="@(() => model.Latitude)" />

                    <MudTextField Label="Longitude" HelperText="Venue Longitude for map" Class="mt-3"
                                  @bind-Value="model.Longitude" For="@(() => model.Longitude)" />

                    <MudTextField Label="Website Url" HelperText="Website" Class="mt-3"
                                  @bind-Value="model.WebsiteUrl" For="@(() => model.WebsiteUrl)" />

                   <MudAutocomplete T="ImageFile" Label="Image" @bind-Value="model.Image"
                                     HelperText="Select Image from list (type name to find)"
                                     SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Title}")" />

                    <MudTextField Label="Slug" HelperText="url slug for page" Class="mt-3"
                                  @bind-Value="model.Slug" For="@(() => model.Slug)" />
                </MudCardContent>
            </MudCard>

        </EditForm>
    }
    </div>

@code {

    private async Task<IEnumerable<ImageFile>> Search(string value)
    {
        var results = await mediator.Send(new GetImageFiles.Query(0, 100, 1, value));
        return results.Data;
    }

    private AlterEventVenue.Command model { get; set; }

    [Parameter]
    public string ContentTagId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ContentTagId == null)
        {
            model = new AlterEventVenue.Command();
        }
        else
        {
            var results = await mediator.Send(new GetEventVenue.Query(Guid.Parse(ContentTagId)));
            model = mapper.Map<AlterEventVenue.Command>(results.Data);
        }
    }

    private string value { get; set; } = "Nothing selected";

    private bool DeleteDisabled { get { return model.Id == null; }}

    private async Task DeleteClick()
    {
        var result = await mediator.Send(new DeleteEventVenue.Command { Id = model.Id.Value });
        if(result.Success) { navManager.NavigateTo("eventvenues"); }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        var response = await mediator.Send(model);
        model.Id = model.Id ?? response.Data.Id;
        snackbar.Add("Content Saved.", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
        StateHasChanged();
    }

}
