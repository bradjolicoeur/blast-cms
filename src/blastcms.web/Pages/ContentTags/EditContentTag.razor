@page "/contenttag/edit"
@page "/contenttag/edit/{ContentTagId}"

@attribute [Authorize]

@inject IMediator mediator
@inject IMapper mapper
@inject ISnackbar snackbar
@inject NavigationManager navManager

<h3>Edit Content Tag</h3>

<div style="max-width: 1000px;">
    @if (model == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-8">Save</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" ButtonType="ButtonType.Button" Disabled="DeleteDisabled" Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeleteClick" Class="mr-8">Delete</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleLeft" Href="contenttags" Variant="Variant.Outlined" Color="Color.Secondary" Class="mr-8">Cancel</MudIconButton>
                </MudCardActions>
            </MudCard>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Value" HelperText="Unique Value"
                                  @bind-Value="model.Value" For="@(() => model.Value)" />

                </MudCardContent>


            </MudCard>

        </EditForm>
    }
    </div>

@code {

    private AlterContentTag.Command model { get; set; }

    [Parameter]
    public string ContentTagId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (ContentTagId == null)
        {
            model = new AlterContentTag.Command();
        }
        else
        {
            var results = await mediator.Send(new GetContentTag.Query(Guid.Parse(ContentTagId)));
            model = mapper.Map<AlterContentTag.Command>(results.Data);
        }
    }

    private bool DeleteDisabled { get { return model.Id == null; }}

    private async Task DeleteClick()
    {
        var result = await mediator.Send(new DeleteContentTag.Command { Id = model.Id.Value });
        if(result.Success) { navManager.NavigateTo("contenttags"); }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        var response = await mediator.Send(model);
        model.Id = model.Id ?? response.Data.Id;
        snackbar.Add("Content Saved.", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });

        StateHasChanged();
    }

}
