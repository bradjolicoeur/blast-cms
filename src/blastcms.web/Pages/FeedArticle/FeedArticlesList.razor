@page "/feedarticles"

@attribute [Authorize]

@inject IDispatcher mediator

    <MudCard>
        <MudCardContent>
            <ArticleScraper OnSubmit="OnSubmitHandler"></ArticleScraper>
        </MudCardContent>
    </MudCard>

    <MudTable Loading="true" Hover="true" Striped="true" ServerData="@(new Func<TableState, Task<TableData<FeedArticle>>>(ServerReload))" @bind-SelectedItem="selectedItem" @ref="table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Feed Articles</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Author</MudTh>
            <MudTh>Site Name</MudTh>
            <MudTh>Slug</MudTh>
            <MudTh>Id</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Author">@context.Author</MudTd>
            <MudTd DataLabel="Site Name">@context.SiteName</MudTd>
            <MudTd DataLabel="Slug">@context.Slug</MudTd>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Link"><MudButton Class="mt-3" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Href="@($"feedarticle/edit/{context.Id}")">Edit</MudButton></MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

<MudButton Class="mt-3" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Href="feedarticle/edit">Add New</MudButton>

@code {
    
    private string searchString = "";
    private FeedArticle selectedItem = null;
    private HashSet<FeedArticle> selectedItems = new HashSet<FeedArticle>();

    public int TotalItems { get; set; }
    public int CurrentPage { get; set; }
    public int PageSize { get; set; } = 10;
    public int Skip => ((CurrentPage - 1) * PageSize);

    private IEnumerable<FeedArticle> PagedData;
    private MudTable<FeedArticle> table;

    private async Task<TableData<FeedArticle>> ServerReload(TableState state)
    {

        CurrentPage = state.Page + 1;
        PageSize = state.PageSize;

        await LoadData();

        return new TableData<FeedArticle>() { TotalItems = TotalItems, Items = PagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task LoadData()
    {
        CurrentPage = CurrentPage < 1 ? 1 : CurrentPage;

        var results = await mediator.Send(new GetFeedArticles.Query(Skip, PageSize, CurrentPage, searchString));
        PagedData = results.Data;
        TotalItems = (int)results.Count;
    }

    protected void OnSubmitHandler()
    {
        CurrentPage = 1;
        table.ReloadServerData();
    }

}