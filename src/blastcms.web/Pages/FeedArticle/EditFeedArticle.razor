@page "/feedarticle/edit"
@page "/feedarticle/edit/{ContentTagId}"

@attribute [Authorize]

@inject IMediator mediator
@inject IMapper mapper
@inject ISnackbar snackbar
@inject NavigationManager navManager

<h3>Edit Feed Article</h3>

<div style="max-width: 1000px;">
    @if (model == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-auto">Save</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Disabled="DeleteDisabled" Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeleteClick" Class="mr-auto">Delete</MudButton>
                    <MudButton Href="/feedarticles" Variant="Variant.Outlined" Color="Color.Secondary" Class="mr-auto">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Title" HelperText="Unique Title"
                                  @bind-Value="model.Title" For="@(() => model.Title)" />

                    <MudTextField Lines="3" Label="Description" HelperText="Short summary for article in plain text" Class="mt-3"
                                  @bind-Value="model.Description" For="@(() => model.Description)" />

                    <MudTextField Label="Author" Class="mt-3" HelperText="Author of content"
                                  @bind-Value="model.Author" For="@(() => model.Author)" />
                    <MudSelect T="string" Label="Tags" HelperText="Pick one or more tags" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="model.Tags">
                        @foreach (var state in Tags)
                        {
                            <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                        }
                    </MudSelect>

                    <MudTextField Label="Article URL" HelperText="Article Url" Class="mt-3"
                                  @bind-Value="model.ArticleUrl" For="@(() => model.ArticleUrl)" />

                    <MudTextField Label="Image Url" HelperText="Article Image Url" Class="mt-3"
                                  @bind-Value="model.ImageUrl" For="@(() => model.ImageUrl)" />

                    <MudTextField Label="Site Name" HelperText="Name of Site Referenced" Class="mt-3"
                                  @bind-Value="model.SiteName" For="@(() => model.SiteName)" />

                    <MudTextField Label="Notes" HelperText="Markdown content" Lines="5" Class="mt-3" @bind-Value="model.Notes" For="@(() => model.Notes)" />

                    <MudTextField Label="Slug" HelperText="url slug for page" Class="mt-3"
                                  @bind-Value="model.Slug" For="@(() => model.Slug)" />
                </MudCardContent>
            </MudCard>

        </EditForm>
    }
    </div>

@code {

    private AlterFeedArticle.Command model { get; set; }

    [Parameter]
    public string ContentTagId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var tags = await mediator.Send(new GetContentTags.Query(0, 1000, 1, ""));
        Tags = tags.Data.Select(s => s.Value).ToArray();

        if (ContentTagId == null)
        {
            model = new AlterFeedArticle.Command();
        }
        else
        {
            var results = await mediator.Send(new GetFeedArticle.Query(Guid.Parse(ContentTagId)));
            model = mapper.Map<AlterFeedArticle.Command>(results.Data);
        }
    }

    private string value { get; set; } = "Nothing selected";

    private string[] Tags;

    private bool DeleteDisabled { get { return model.Id == null; }}

    private async Task DeleteClick()
    {
        var result = await mediator.Send(new DeleteFeedArticle.Command { Id = model.Id.Value });
        if(result.Success) { navManager.NavigateTo("/feedarticles"); }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        var response = await mediator.Send(model);
        model.Id = model.Id ?? response.Data.Id;
        snackbar.Add("Content Saved.", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
        StateHasChanged();
    }

}
