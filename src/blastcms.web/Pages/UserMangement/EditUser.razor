@page "/user/edit"
@page "/user/edit/{UserId}"

@attribute [Authorize]

@inject IDispatcher mediator
@inject IMapper mapper
@inject ISnackbar snackbar
@inject NavigationManager navManager

<h3>Edit User</h3>

<div style="max-width: 1000px;">
    @if (model == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-8" >Save</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" ButtonType="ButtonType.Button" Disabled="DeleteDisabled" Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeleteClick" Class="mr-8">Delete</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleLeft" Href="users" Variant="Variant.Outlined" Color="Color.Secondary" Class="mr-8">Cancel</MudIconButton>
                </MudCardActions>
            </MudCard>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Value" HelperText="First Name"
                                  @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                    <MudTextField Label="Value" HelperText="Last Name"
                                  @bind-Value="model.LastName" For="@(() => model.LastName)" />

                    <MudTextField Label="Value" HelperText="Email"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />

                    @if (model.Active??false)
                    {
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mr-auto mt-3" OnClick="DeactivateClick">Deactivate User</MudButton>
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mr-auto mt-3" OnClick="ReactivateClick">Reactivate User</MudButton>
                    }

                    <MudCheckBox @bind-Value="model.Active" For="@(() => model.Active)" ReadOnly="true" Label="Active"></MudCheckBox>

                </MudCardContent>


            </MudCard>

        </EditForm>
    }
</div>

@code {

    private AlterUser.Command model { get; set; }

    [Parameter]
    public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (UserId == null)
        {
            model = new AlterUser.Command();
        }
        else
        {
            var results = await mediator.Send(new GetUser.Query(UserId));
            model = mapper.Map<AlterUser.Command>(results.User);
        }
    }

    private bool DeleteDisabled { get { return model.Id == null; } }

    private async Task DeleteClick()
    {
        var result = await mediator.Send(new DeleteUser.Command { Id = model.Id });
        if (result.Success) { navManager.NavigateTo("users"); }
    }

    private async Task DeactivateClick()
    {
        var result = await mediator.Send(new DeactivateUser.Command { Id = model.Id });
        if (result.Success) { navManager.NavigateTo("users"); }
    }

    private async Task ReactivateClick()
    {
        var result = await mediator.Send(new ReactivateUser.Command { Id = model.Id });
        if (result.Success) { navManager.NavigateTo("users"); }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        var response = await mediator.Send(model);
        model.Id = model.Id ?? response.User.Id;
        snackbar.Add("Content Saved.", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });

        StateHasChanged();
    }

}
