@page "/contentblock/edit"
@page "/contentblock/edit/{ContentTagId}"

@attribute [Authorize]

@inject IDispatcher mediator
@inject IMapper mapper
@inject ISnackbar snackbar
@inject NavigationManager navManager

<h3>Edit Content Block</h3>

<div style="max-width: 1000px;">
    @if (model == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-8">Save</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" ButtonType="ButtonType.Button" Disabled="DeleteDisabled" Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeleteClick" Class="mr-8">Delete</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleLeft" Href="contentblocks" Variant="Variant.Outlined" Color="Color.Secondary" Class="mr-8">Cancel</MudIconButton>
                </MudCardActions>
            </MudCard>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Title" HelperText="Unique Title"
                                  @bind-Value="model.Title" For="@(() => model.Title)" />
                    <MudSelect T="string" Label="Groups" HelperText="Pick one or more content groups" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="model.Groups">
                        @foreach (var state in Groups)
                        {
                            <MudSelectItem T="string" Value="@state">@state</MudSelectItem>
                        }
                    </MudSelect>
                    <MudAutocomplete T="ImageFile" Label="Image" @bind-Value="model.Image"
                                     HelperText="Select Image from list (type name to find)"
                                     SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Title}")" />

                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mr-auto mt-3" OnClick="WaffleBodyClick">Waffle!</MudButton>
                    <MudTextField Label="Body" HelperText="Markdown content" Lines="30" Class="mt-3" @bind-Value="model.Body" For="@(() => model.Body)" />

                    <MudTextField Label="Slug" HelperText="url slug for page" Class="mt-3"
                                  @bind-Value="model.Slug" For="@(() => model.Slug)" />
                </MudCardContent>
            </MudCard>

        </EditForm>
    }
</div>

@code {

    private AlterContentBlock.Command model { get; set; }

    [Parameter]
    public string ContentTagId { get; set; }

    private async Task<IEnumerable<ImageFile>> Search(string value)
    {
        var results = await mediator.Send(new GetImageFiles.Query(0, 100, 1, value));
        return results.Data;
    }

    protected override async Task OnInitializedAsync()
    {
        var tags = await mediator.Send(new GetContentGroups.Query(0, 1000, 1, ""));
        Groups = tags.Data.Select(s => s.Value).ToArray();

        if (ContentTagId == null)
        {
            model = new AlterContentBlock.Command();
        }
        else
        {
            var results = await mediator.Send(new GetContentBlock.Query(Guid.Parse(ContentTagId)));
            model = mapper.Map<AlterContentBlock.Command>(results.Data);
        }
    }

    private string value { get; set; } = "Nothing selected";

    private string[] Groups;

    private bool DeleteDisabled { get { return model.Id == null; } }

    private async Task DeleteClick()
    {
        var result = await mediator.Send(new DeleteContentBlock.Command { Id = model.Id.Value });
        if (result.Success) { navManager.NavigateTo("contentblocks"); }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        var response = await mediator.Send(model);
        model.Id = model.Id ?? response.Data.Id;
        snackbar.Add("Content Saved.", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });

        StateHasChanged();
    }

    private Task WaffleBodyClick()
    {
        var markdown = WaffleEngine.Markdown(
            paragraphs: 5,
            includeHeading: false);

        model.Body = markdown;

        return Task.CompletedTask;
    }
}
