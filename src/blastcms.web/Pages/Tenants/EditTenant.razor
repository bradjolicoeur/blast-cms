@page "/Tenant/edit"
@page "/Tenant/edit/{TenantId}"

@attribute [Authorize]

@inject IMediator mediator
@inject IMapper mapper
@inject ISnackbar snackbar
@inject NavigationManager navManager

<h3>Edit Tenant</h3>
@if(IsAdministrative)
{
    <h4 class="mt-3 mb-3">** Administrative Tenant is Readonly **</h4>
}


<div style="max-width: 1000px;">
    @if (model == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudCard>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mr-8">Save</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" ButtonType="ButtonType.Button" Disabled="DeleteDisabled" Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeleteClick" Class="mr-8">Delete</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleLeft" Href="tenants" Variant="Variant.Outlined" Color="Color.Secondary" Class="mr-8">Cancel</MudIconButton>
                </MudCardActions>
            </MudCard>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Tenant Id" HelperText="Unique System Id"
                                  @bind-Value="model.Id" For="@(() => model.Id)" ReadOnly="@IsAdministrative" />
                    <MudTextField Label="Tenant Name" HelperText="Tenant Name"
                                  @bind-Value="model.Name" For="@(() => model.Name)" ReadOnly="@IsAdministrative" />

                    <MudTextField Label="Identifier" HelperText="Identifier in host header" Class="mt-3"
                                  @bind-Value="model.Identifier" For="@(() => model.Identifier)" ReadOnly="@IsAdministrative" />

                    <MudTextField Label="Reference Id" HelperText="Reference Identifier for subscription" Class="mt-3"
                                  @bind-Value="model.ReferenceId" For="@(() => model.ReferenceId)" ReadOnly="@IsAdministrative" />
                    
                    <MudTextField Label="Customer Id" HelperText="Identifier for customer in CRM" Class="mt-3"
                                  @bind-Value="model.CustomerId" For="@(() => model.CustomerId)" ReadOnly="@IsAdministrative" />

                    <MudTextField Label="Identity Tenant Id" HelperText="Identifier for tenant in Identity system" Class="mt-3"
                                  @bind-Value="model.IdentityTenantId" For="@(() => model.IdentityTenantId)" ReadOnly="@IsAdministrative" />

                    <MudTextField Label="OIDC ClientId" Class="mt-3" HelperText="OIDC ClientId"
                                  @bind-Value="model.OpenIdConnectClientId" For="@(() => model.OpenIdConnectClientId)" ReadOnly="@IsAdministrative" />
                    <MudTextField Label="OIDC Authority" Class="mt-3" HelperText="OIDC Authority"
                                  @bind-Value="model.OpenIdConnectAuthority" For="@(() => model.OpenIdConnectAuthority)" ReadOnly="@IsAdministrative" />
                    <MudTextField Label="OIDC Client Secret" Class="mt-3" HelperText="OIDC Client Secret"
                                  @bind-Value="model.OpenIdConnectClientSecret" For="@(() => model.OpenIdConnectClientSecret)" ReadOnly="@IsAdministrative" />
                    <MudTextField Label="Callenge Scheme" HelperText="Authentication Challenge Scheme" Class="mt-3"
                                  @bind-Value="model.ChallengeScheme" For="@(() => model.ChallengeScheme)" ReadOnly="@IsAdministrative" />
                </MudCardContent>
            </MudCard>

        </EditForm>
    }
</div>

@code {


    private AlterTenant.Command model { get; set; }
    private bool IsAdministrative {get;set;} = false;

    [Parameter]
    public string TenantId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (TenantId == null)
        {
            model = new AlterTenant.Command();
        }
        else
        {
            var results = await mediator.Send(new GetTenant.Query(TenantId));
            IsAdministrative = results.Tenant.AdminTenant;
            model = mapper.Map<AlterTenant.Command>(results.Tenant);
        }
    }

    private string value { get; set; } = "Nothing selected";

    private bool DeleteDisabled { get { return model.Id == null; } }

    private async Task DeleteClick()
    {
        var result = await mediator.Send(new DeleteTenant.Command { Id = model.Id });
        if (result.Success) { navManager.NavigateTo("Tenants"); }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        var response = await mediator.Send(model);
        model.Id = model.Id ?? response.Tenant.Id;
        snackbar.Add("Content Saved.", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
        StateHasChanged();
    }

}

