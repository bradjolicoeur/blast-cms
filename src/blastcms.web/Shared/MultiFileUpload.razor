@page "/file-upload-1"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject ILogger<MultiFileUpload> Logger
@inject IDispatcher Mediator
@inject ISnackbar snackbar


<p>
    <label style="
                            box-shadow: 0 2px 7px #4caf50;
                            display: inline-flex;
                            width: 150px;
                            justify-content: space-around;
                            border-radius: 2em;
                            color: white;
                            border:2px solid;
                            cursor: pointer;
                            align-items: center;
                            padding:6px;
                            background-color: #4caf50;"
           for="fileInput2">
        Upload <MudIcon Icon="@Icons.Material.Filled.CloudUpload" />
    </label>
    <InputFile id="fileInput2" OnChange="@LoadFiles" hidden multiple />
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}


@code {


    private int maxAllowedFiles = 3;
    private bool isLoading;

    [Parameter] public EventCallback OnSubmit { get; set; }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {

                var result = await Mediator.Send(new UploadImageFileSimple.Command { BrowserFile = file });


                snackbar.Add($"{file.Name} Saved.", Severity.Success, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });
            }
            catch (Exception ex)
            {
                snackbar.Add($"{file.Name} Not Saved. {ex.Message}", Severity.Error, (options) =>
                {
                    options.CloseAfterNavigation = true;
                });

                Logger.LogError("File: {Filename} Error: {Error}",
                file.Name, ex.Message);
            }
        }

        isLoading = false;
        await OnSubmit.InvokeAsync();
    }
}
